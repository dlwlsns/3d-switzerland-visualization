#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC = 
CFLAGS = -std=c++11 -Wall -fexceptions -fPIC
RESINC = 
LIBDIR = 
LIB = 
LDFLAGS = 

INC_DEBUG = $(INC) -I../dependencies/glm -I/usr/include
CFLAGS_DEBUG = $(CFLAGS) -g
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS) -lglut -lGLU -lGL -lfreeimage
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG = 
OUT_DEBUG = bin/Debug/libengine.so

INC_RELEASE = $(INC) -I../dependencies/glm -I/usr/include
CFLAGS_RELEASE = $(CFLAGS) -O2
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s -lglut -lGLU -lGL -lfreeimage
OBJDIR_RELEASE = obj/Release
DEP_RELEASE = 
OUT_RELEASE = bin/Release/libengine.so

OBJ_DEBUG = $(OBJDIR_DEBUG)/texture.o $(OBJDIR_DEBUG)/spotLight.o $(OBJDIR_DEBUG)/sceneReader.o $(OBJDIR_DEBUG)/renderList.o $(OBJDIR_DEBUG)/pointLight.o $(OBJDIR_DEBUG)/perspectiveCamera.o $(OBJDIR_DEBUG)/orthographicCamera.o $(OBJDIR_DEBUG)/camera.o $(OBJDIR_DEBUG)/object.o $(OBJDIR_DEBUG)/node.o $(OBJDIR_DEBUG)/mesh.o $(OBJDIR_DEBUG)/material.o $(OBJDIR_DEBUG)/light.o $(OBJDIR_DEBUG)/directionalLight.o $(OBJDIR_DEBUG)/cg_engine.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/texture.o $(OBJDIR_RELEASE)/spotLight.o $(OBJDIR_RELEASE)/sceneReader.o $(OBJDIR_RELEASE)/renderList.o $(OBJDIR_RELEASE)/pointLight.o $(OBJDIR_RELEASE)/perspectiveCamera.o $(OBJDIR_RELEASE)/orthographicCamera.o $(OBJDIR_RELEASE)/camera.o $(OBJDIR_RELEASE)/object.o $(OBJDIR_RELEASE)/node.o $(OBJDIR_RELEASE)/mesh.o $(OBJDIR_RELEASE)/material.o $(OBJDIR_RELEASE)/light.o $(OBJDIR_RELEASE)/directionalLight.o $(OBJDIR_RELEASE)/cg_engine.o

all: debug release

clean: clean_debug clean_release

before_debug: 
	test -d bin/Debug || mkdir -p bin/Debug
	test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)

after_debug: 

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) -shared $(LIBDIR_DEBUG) $(OBJ_DEBUG)  -o $(OUT_DEBUG) $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/texture.o: texture.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c texture.cpp -o $(OBJDIR_DEBUG)/texture.o

$(OBJDIR_DEBUG)/spotLight.o: spotLight.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c spotLight.cpp -o $(OBJDIR_DEBUG)/spotLight.o

$(OBJDIR_DEBUG)/sceneReader.o: sceneReader.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c sceneReader.cpp -o $(OBJDIR_DEBUG)/sceneReader.o

$(OBJDIR_DEBUG)/renderList.o: renderList.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c renderList.cpp -o $(OBJDIR_DEBUG)/renderList.o

$(OBJDIR_DEBUG)/pointLight.o: pointLight.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c pointLight.cpp -o $(OBJDIR_DEBUG)/pointLight.o

$(OBJDIR_DEBUG)/perspectiveCamera.o: perspectiveCamera.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c perspectiveCamera.cpp -o $(OBJDIR_DEBUG)/perspectiveCamera.o

$(OBJDIR_DEBUG)/orthographicCamera.o: orthographicCamera.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c orthographicCamera.cpp -o $(OBJDIR_DEBUG)/orthographicCamera.o

$(OBJDIR_DEBUG)/camera.o: camera.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c camera.cpp -o $(OBJDIR_DEBUG)/camera.o

$(OBJDIR_DEBUG)/object.o: object.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c object.cpp -o $(OBJDIR_DEBUG)/object.o

$(OBJDIR_DEBUG)/node.o: node.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c node.cpp -o $(OBJDIR_DEBUG)/node.o

$(OBJDIR_DEBUG)/mesh.o: mesh.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c mesh.cpp -o $(OBJDIR_DEBUG)/mesh.o

$(OBJDIR_DEBUG)/material.o: material.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c material.cpp -o $(OBJDIR_DEBUG)/material.o

$(OBJDIR_DEBUG)/light.o: light.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c light.cpp -o $(OBJDIR_DEBUG)/light.o

$(OBJDIR_DEBUG)/directionalLight.o: directionalLight.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c directionalLight.cpp -o $(OBJDIR_DEBUG)/directionalLight.o

$(OBJDIR_DEBUG)/cg_engine.o: cg_engine.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c cg_engine.cpp -o $(OBJDIR_DEBUG)/cg_engine.o

clean_debug: 
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf bin/Debug
	rm -rf $(OBJDIR_DEBUG)

before_release: 
	test -d bin/Release || mkdir -p bin/Release
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) -shared $(LIBDIR_RELEASE) $(OBJ_RELEASE)  -o $(OUT_RELEASE) $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/texture.o: texture.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c texture.cpp -o $(OBJDIR_RELEASE)/texture.o

$(OBJDIR_RELEASE)/spotLight.o: spotLight.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c spotLight.cpp -o $(OBJDIR_RELEASE)/spotLight.o

$(OBJDIR_RELEASE)/sceneReader.o: sceneReader.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c sceneReader.cpp -o $(OBJDIR_RELEASE)/sceneReader.o

$(OBJDIR_RELEASE)/renderList.o: renderList.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c renderList.cpp -o $(OBJDIR_RELEASE)/renderList.o

$(OBJDIR_RELEASE)/pointLight.o: pointLight.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c pointLight.cpp -o $(OBJDIR_RELEASE)/pointLight.o

$(OBJDIR_RELEASE)/perspectiveCamera.o: perspectiveCamera.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c perspectiveCamera.cpp -o $(OBJDIR_RELEASE)/perspectiveCamera.o

$(OBJDIR_RELEASE)/orthographicCamera.o: orthographicCamera.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c orthographicCamera.cpp -o $(OBJDIR_RELEASE)/orthographicCamera.o

$(OBJDIR_RELEASE)/camera.o: camera.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c camera.cpp -o $(OBJDIR_RELEASE)/camera.o

$(OBJDIR_RELEASE)/object.o: object.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c object.cpp -o $(OBJDIR_RELEASE)/object.o

$(OBJDIR_RELEASE)/node.o: node.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c node.cpp -o $(OBJDIR_RELEASE)/node.o

$(OBJDIR_RELEASE)/mesh.o: mesh.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c mesh.cpp -o $(OBJDIR_RELEASE)/mesh.o

$(OBJDIR_RELEASE)/material.o: material.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c material.cpp -o $(OBJDIR_RELEASE)/material.o

$(OBJDIR_RELEASE)/light.o: light.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c light.cpp -o $(OBJDIR_RELEASE)/light.o

$(OBJDIR_RELEASE)/directionalLight.o: directionalLight.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c directionalLight.cpp -o $(OBJDIR_RELEASE)/directionalLight.o

$(OBJDIR_RELEASE)/cg_engine.o: cg_engine.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c cg_engine.cpp -o $(OBJDIR_RELEASE)/cg_engine.o

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf bin/Release
	rm -rf $(OBJDIR_RELEASE)

test:
	cd ../test && make

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release

